Parsing test_html.cs

-- Parse successfully <....>
-- Test with relevant CS commands -- 

var: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

uvar: </title><script>alert(1)</script>

alt: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


Var created using 'set' command: &lt;script&gt;alert(1);&lt;/script&gt;

lvar: Hello &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

evar: Hello &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;




name: &lt;evilname&gt;


include: 
Title: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


linclude: 
Title: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


Call macro:Inside macro which *should* be auto escaped
Argument: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
Local var: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;
End macro

-- Test with explicit escaping functions, which should take precedence --


Inside cs escape: "js" : \x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E



Inside cs escape: "none" : </title><script>alert(1)</script>




<script>
var x = "\x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E"
var htmlX = "&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;"
var noneX = "</title><script>alert(1)</script>"
var xagain = "\x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E"
</script>


<script>
include inside escape html:
var htmlX = Title: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;

var X = "\x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E"
include inside escape none:
var noneX = Title: </title><script>alert(1)</script>

var xagain = "\x3C\x2Ftitle\x3E\x3Cscript\x3Ealert(1)\x3C\x2Fscript\x3E"
</script>

--- Test all possible auto escaping cases ---

HTML body: &lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;


HTML attr: <input type=text name=" &lt; &gt; &quot; &amp; &#39;" >


Unquoted attr: <input value=&lt;&gt;&quot;&amp;&#39;&#61; >

Unquoted attr with spaces: <input value=helloworldtoyou>

Unquoted attr with ctrl chars: <input value=hide>


Bad HTML tag name: <abcs value=x >

Bad HTML attr name: <input abcs value=x >


Good HTML tag name: <ab-cs value=x >

Good HTML attr name: <input ab-cs value=x >

URI attr: <a href="http://a.com?q=&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;">link </a>

Unquoted URI attr: <a href=http://a.com?q=quote&#39;backslash\semicolon;endtag&lt;/script&gt;>link </a>




Unquoted attr value as uvar:
<a href=http://www.google.com onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">


Unquoted attr value as var:
<a href=# onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Unquoted attr value as var that is not modified:
<a href=http://www.google.com onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Quoted attr value as uvar:
<a href="http://www.google.com" onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Quoted attr value as var:
<a href="#" onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Unquoted attr value pair:

<input name=button onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

attr name as var:
<a href="#" onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Unquoted attr value as lvar:
<a href=http://www.google.com onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

name:
<a href=GoodUrl onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Number as var:
<a name=9 onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

Number as lvar:
<a name=9 onclick="alert('quote \x27 backslash \x5C semicolon \x3B end tag \x3C\x2Fscript\x3E')">

A kludgy way to validate that variable outside tag is not parsed:

<script>
var q="quote &#39; backslash \ semicolon ; end tag &lt;/script&gt;"

</script>

-- End of tests --

